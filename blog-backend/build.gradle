def getDbProperties = {
    def properties = new Properties()
    //这里最好读取 .properties 格式的文件，yml 不能正常读取
    file("src/main/resources/mybatis/config.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/mybatis/generator.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}


buildscript {
    ext {
        springBootVersion = '2.1.1.RELEASE'
    }
    repositories {
        mavenCentral()
        //添加maven仓库 mybatis-generetor
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        // spring boot 构建插件
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        // mybatis-generator 插件
        classpath "gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:1.4"

        // docker
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:1.2")
        // end docker

    }
}
// 从阿里云下载依赖
allprojects {
    repositories {
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        maven { url 'http://maven.aliyun.com/nexus/content/repositories/jcenter' }
    }
}
// end

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
// 打 war 包
//apply plugin: 'war'

// 引入 mybatis-generator 插件mybatis-generetor
apply plugin: "com.arenagod.gradle.MybatisGenerator"
// end

// 引入 docker 插件
apply plugin: 'application'
apply plugin: 'docker'
// end

// group
group = 'cn.hqweay'
// version
version = '1.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8
// 入口类 docker 使用
mainClassName = "cn.hqweay.blog.BlogApplication"
// end

// jar 包信息  先打 jar 包 在把 jar 包打包为 docker image
jar {
    baseName = "blog-backend"
    version = 1.0
}
// end

repositories {
    mavenCentral()
    // docker
    jcenter()
    // end
}


// docker
distDocker {
    baseImage = "openjdk"
    maintainer = "harrison"
}

// 直接引入 Dockerfile 文件
//task buildDocker(type: Docker) {
//    applicationName = jar.baseName
//    tagVersion = jar.version
//    dockerfile = file('src/main/docker/Dockerfile')
//    doFirst {
//        copy {
//            from jar
//            into stageDir
//        }
//    }
//}
task dockerBuilder(type: Docker) {
    applicationName = jar.baseName
    tagVersion = jar.version
    volume('/tmp')
    addFile("${jar.baseName}-${jar.version}.jar", "app.jar")
    entryPoint(["java", "-Djava.security.egd=file:/dev/./urandom", "-jar", 'app.jar'])
    exposePort(8082)
    doFirst {
        copy {
            from jar
            into stageDir
        }
    }
}
// end

configurations {
    // 这里需要使用 MyBatis Generator，MySQL 驱动，以及 MyBatis Mapper.
    // 由于代码生成单独运行即可,不需要参与到整个项目的编译，因此在 build.gradle 中添加配置：
    mybatisGenerator
    // end

}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    // 忘了
    implementation('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
//    implementation('org.springframework.boot:spring-boot-starter-tomcat')
    // 打包 docker 不支持 provideRuntime
//    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')


    testImplementation('org.springframework.boot:spring-boot-starter-test')

    // 测试 junit
    //implementation 'org.junit.jupiter:junit-jupiter-api'


    // https://mvnrepository.com/artifact/mysql/mysql-connector-java
    compile group: 'mysql', name: 'mysql-connector-java', version: '5.1.45'

    // redis
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '2.1.1.RELEASE'

    // lombok
    // https://mvnrepository.com/artifact/org.projectlombok/lombok
    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.6'

    // swagger api 管理
    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger2
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    // swagger ui
    // https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'


    // 热部署
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-devtools
    compile group: 'org.springframework.boot', name: 'spring-boot-devtools', version: '2.1.3.RELEASE'

    // 暂未使用
    // https://mvnrepository.com/artifact/com.alibaba/fastjson
    compile group: 'com.alibaba', name: 'fastjson', version: '1.2.47'


    // pagehelper
    // https://mvnrepository.com/artifact/com.github.pagehelper/pagehelper-spring-boot-starter
    compile group: 'com.github.pagehelper', name: 'pagehelper-spring-boot-starter', version: '1.2.10'

    
    // shiro
    // https://mvnrepository.com/artifact/org.apache.shiro/shiro-spring
    compile group: 'org.apache.shiro', name: 'shiro-spring', version: '1.4.0'


    // jwt
    // https://mvnrepository.com/artifact/com.auth0/java-jwt
    compile group: 'com.auth0', name: 'java-jwt', version: '3.8.0'


    // rabbitmq
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-amqp
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-amqp', version: '2.1.5.RELEASE'


    //必要的
    compile('org.apache.commons:commons-pool2:2.6.0')
    //spring cache 效果:redis 里的数据删了,spring 仍能查到数据,就是通过它拿到的
    compile('org.springframework.boot:spring-boot-starter-cache')


    // mybatis
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.6'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.45'
    mybatisGenerator 'tk.mybatis:mapper:3.3.9'




    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-mail
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-mail', version: '2.1.4.RELEASE'


}

// mybatis-generator.xml 配置路径
mybatisGenerator {
    verbose = true
    configFile = 'src/main/resources/mybatis/generator.xml'

}
// end